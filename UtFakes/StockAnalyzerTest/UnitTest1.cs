using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using VS.UTFakes;
using Microsoft.QualityTools.Testing.Fakes;
using System.Collections.Generic;
using System.IO;

namespace StockAnalyzer.Test
{
    /// <summary>
    /// stubs inject interface
    /// </summary>
    [TestClass]
    public class UnitTest1
    {
        /// <summary>
        /// 实现一个interface fake
        /// </summary>
        [TestMethod]
        public void TestContosoStockPrice()
        {
            // Arrange:
            int i = 1;
// Create the fake stockFeed:
            var stockFeed =
                 new VS.UTFakes.Fakes.StubIStockFeed() // Generated by Fakes.
                 {
                     // Define each method:
                     // Name is original name + parameter types:
                     GetSharePriceString = (s) => { return 1234; },
                     PriceGet = () => { return i;},
                     PriceSetInt32 = (s) => { i = s; },
                     
                 };
// 泛型的支持
stockFeed.GetValueOf1<int>(() => { return 5; });
            //easy to unstood,

            // In the completed application, stockFeed would be a real one:
            var componentUnderTest = new VS.UTFakes.StockAnalyzer(stockFeed);

            // Act:
            int actualValue = componentUnderTest.GetContosoPrice();

            // Assert:http://msdn.microsoft.com/en-us/library/hh549174.aspx
            Assert.AreEqual(1234, actualValue);
            Assert.AreEqual(1,componentUnderTest.GetIstockFeedPrice());
            componentUnderTest.SetIstockFeedPrice(2);
            Assert.AreEqual(2, componentUnderTest.GetIstockFeedPrice());
            Assert.AreEqual(5, componentUnderTest.GetGenericmethods());
        }

        /// <summary>
        /// Shim
        /// </summary>
        [TestMethod]
       //[ExpectedException(typeof(ApplicationException))]
        public void TestCurrentYear()
        {
            using (ShimsContext.Create())
            {
 // fake系统的方法 DateTinme.Now
                System.Fakes.ShimDateTime.NowGet = () => { return new DateTime(1991, 1, 1); };
                componentUnderTest s = new componentUnderTest();
                Assert.AreEqual(1991, s.GetTheCurrentYear());

                System.Fakes.ShimDateTime.NowGet = () => { return new DateTime(2000, 1, 1); };
               //Y2KChecker.Check();

// static class for all static
                Assert.AreEqual(2, Y2KChecker.a);
                VS.UTFakes.Fakes.ShimY2KChecker.return5=()=>{return 3;};
                VS.UTFakes.Fakes.ShimY2KChecker.StaticConstructor = () => {
                    VS.UTFakes.Fakes.ShimY2KChecker.aGet = () => { return 5; };
                };
                Assert.AreEqual(2, Y2KChecker.returnA());

               // Assert.AreEqual(2, Y2KChecker.returnA());

// Fake 类的一个方法。 For all Instance just like static class
                componentUnderTest s1 = new componentUnderTest();
                componentUnderTest s2 = new componentUnderTest();
                VS.UTFakes.Fakes.ShimcomponentUnderTest.AllInstances.GetTheCurrentYear = (componentUnderTest) => { return 1; };
                Assert.AreEqual(1,s1.GetTheCurrentYear());

// for one each instance! oh,you donot believe!Yes, you cannot believe
                var ClassMethod1 = new VS.UTFakes.Fakes.ShimClassMethod()
                {
                    returnClassMethodName = () => { return "ClassMethod1"; },                    
                    
                };
                ClassMethod ClassMethod2 = new VS.UTFakes.Fakes.ShimClassMethod()
                {
                    returnClassMethodName = () => { return "ClassMethod2"; },
                    returnClassPrivateMethodName = () => { return "private"; },

                };
                //doing here,you need cast ShimClassMethod to ClassMethod easy to do it.
                //maybe you will wonder why ShimClassMethod can cast ClassMethod,beacuse i can tell you!PS:i donot know.
                //mayne you put F12 see Definition of ShimClassMethod
                Assert.AreEqual("ClassMethod1", ClassMethod1.Instance.returnClassMethodName());
                Assert.AreEqual("ClassMethod2", ClassMethod2.returnClassMethodName());
                VS.UTFakes.UseClassMethod useClassMethod = new UseClassMethod();
                VS.UTFakes.Fakes.ShimClassMethod.AllInstances.returnClassPrivateMethodName = (ClassMethod) => { return "private"; };
                Assert.AreEqual("private", useClassMethod.GetTestreturnClassPrivateMethodName());

                //To be continue http://msdn.microsoft.com/en-us/library/hh549176.aspx
                
// Constructors Unit Test 
               
                VS.UTFakes.Fakes.ShimClassMethod.ConstructorInt32 = (ClassMethod, value) =>
                {
                    var shim = new VS.UTFakes.Fakes.ShimClassMethod(ClassMethod)
                    {
                        ValueGet = () => { return -5;},
                    };
                };
                ClassMethod ClassMethod3 = new ClassMethod(3);
                new VS.UTFakes.Fakes.ShimClassMethod(ClassMethod3);
                Assert.AreEqual(-5, ClassMethod3.Value);

// Base memebers
                var child = new VS.UTFakes.Fakes.ShimMyChild();
                var mybase=new VS.UTFakes.Fakes.ShimMyBase(child) { MyMethod = () => { return 5; } };
                Assert.AreEqual(5, mybase.Instance.MyMethod());

// binding interface,和StubIStockFeed作用一样了。
                var myenumerable = new VS.UTFakes.Fakes.ShimMyEnumerable();
                myenumerable.Bind(new List<int> { 1, 2, 3 });
                var test=myenumerable.Instance.GetEnumerator();

// use origin
                System.IO.Fakes.ShimFile.WriteAllTextStringString = (fileName, content) =>
                {
                    ShimsContext.ExecuteWithoutShims(() =>
                    {

                        Console.WriteLine("enter");
                        File.WriteAllText(fileName, content);
                        Console.WriteLine("leave");
                    });
                };


            }

         
        }

    }
}
